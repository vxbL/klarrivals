-- Safe Rayfield load
local success, Rayfield = pcall(function()
    return loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
end)

if not success or not Rayfield or not Rayfield.CreateWindow then
    warn("Rayfield failed to load.")
    return
end

-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local LocalPlayer = Players.LocalPlayer
local Workspace = game:GetService("Workspace")

-- Dynamic Camera and Character handling
local function getCamera()
    local cam = workspace.CurrentCamera
    if not cam then
        repeat wait(0.1) cam = workspace.CurrentCamera until cam
    end
    return cam
end

local Camera = getCamera()
local LocalCharacter = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
LocalPlayer.CharacterAdded:Connect(function(char)
    LocalCharacter = char
    warn("Character updated: " .. tostring(LocalCharacter))
    -- Clear ESP elements on character change
    for player, elements in pairs(espElements) do
        if elements then
            for _, obj in pairs(elements) do
                if obj and obj.Remove then obj:Remove() end
            end
        end
        espElements[player] = nil
    end
end)

-- Modules
local Utility = require(ReplicatedStorage.Modules.Utility)

-- ESP config
local esp_enabled = true
local box_color = Color3.fromRGB(255, 255, 255)
local name_color = Color3.fromRGB(255, 255, 255)
local hp_color = Color3.fromRGB(0, 255, 0)
local team_color = Color3.fromRGB(0, 0, 255)
local esp_max_distance = 1000
local espElements = {}
local esp_team_check = true
local esp_visible_check = false

-- Aimbot config
local aimbot_enabled = false
local aimbot_key_name = "MouseButton2"
local aimbot_key_code = Enum.UserInputType.MouseButton2
local aimbot_aim_part = "Head"
local aimbot_fov_size = 100
local aimbot_smoothness = 1
local show_fov_circle = true
local aimbot_held = false
local aimbot_max_distance = 1000
local aimbot_target_method = "Distance"
local aimbot_team_check = true
local aimbot_visible_check = false

-- Silent Aim config
local silent_aim_enabled = false
local silent_aim_key_name = "MouseButton1"
local silent_aim_key_code = Enum.UserInputType.MouseButton1
local silent_aim_fov = 100
local silent_aim_part = "Head"
local silent_aim_hit_chance = 100
local silent_aim_max_distance = 1000
local silent_aim_held = false
local silent_aim_target_method = "Distance"
local silent_aim_team_check = true
local silent_aim_visible_check = false

-- Aim part mapping
local aimPartMapping = {
    Head = {"Head", "HumanoidRootPart"},
    UpperTorso = {"UpperTorso", "HumanoidRootPart"},
    LowerTorso = {"LowerTorso", "HumanoidRootPart"},
    HumanoidRootPart = {"HumanoidRootPart"}
}

local function areOnSameTeam(player1, player2)
    if not player1 or not player2 then return false end
    local team1, team2 = player1.Team, player2.Team
    local teamAttr1 = player1:GetAttribute("Team") or (player1:FindFirstChild("Leaderstats") and player1.Leaderstats:FindFirstChild("Team") and player1.Leaderstats.Team.Value)
    local teamAttr2 = player2:GetAttribute("Team") or (player2:FindFirstChild("Leaderstats") and player2.Leaderstats:FindFirstChild("Team") and player2.Leaderstats.Team.Value)
    if team1 and team2 and team1 == team2 then return true end
    if teamAttr1 and teamAttr2 and teamAttr1 == teamAttr2 then return true end
    return false
end

-- Function to get a valid aim part
local function getValidAimPart(character, aimPart)
    if not character then
        warn("No character found for aim part validation")
        return nil
    end
    local possibleParts = aimPartMapping[aimPart] or {aimPart}
    for _, partName in ipairs(possibleParts) do
        local part = character:FindFirstChild(partName)
        if part then return part end
    end
    warn("No valid aim part found, falling back to HumanoidRootPart")
    return character:FindFirstChild("HumanoidRootPart")
end

-- Function to calculate distance
local function getDistance(pos1, pos2)
    return (pos1 - pos2).Magnitude
end

-- Improved visible check function
local function isVisible(origin, targetPosition, targetCharacter)
    if not origin or not targetPosition or not targetCharacter then
        warn("Invalid parameters for visibility check: origin=" .. tostring(origin) .. ", targetPosition=" .. tostring(targetPosition) .. ", targetCharacter=" .. tostring(targetCharacter))
        return false
    end

    -- Raycast parameters
    local rayParams = RaycastParams.new()
    rayParams.FilterType = Enum.RaycastFilterType.Blacklist
    -- Blacklist local player's character and its descendants to avoid self-collision
    local filter = {LocalPlayer.Character}
    if LocalPlayer.Character then
        for _, descendant in ipairs(LocalPlayer.Character:GetDescendants()) do
            if descendant:IsA("BasePart") then
                table.insert(filter, descendant)
            end
        end
    end
    -- Add transparent parts of the target character to the blacklist
    for _, part in ipairs(targetCharacter:GetDescendants()) do
        if part:IsA("BasePart") and part.Transparency >= 0.9 then
            table.insert(filter, part)
        end
    end
    rayParams.FilterDescendantsInstances = filter
    rayParams.IgnoreWater = true
    rayParams.RespectCanCollide = true

    -- Calculate direction and distance
    local direction = targetPosition - origin
    local distance = direction.Magnitude
    if distance < 0.1 then
        return true -- Target is too close, consider visible
    end
    direction = direction.Unit * distance

    -- Perform raycast
    local success, result = pcall(function()
        return Workspace:Raycast(origin, direction, rayParams)
    end)

    if not success then
        warn("Raycast failed: " .. tostring(result))
        return false
    end

    if result then
        -- Check if the hit instance is part of the target character
        local hitInstance = result.Instance
        if hitInstance and hitInstance:IsDescendantOf(targetCharacter) then
            return true
        end
        -- Additional check for partial visibility (e.g., through semi-transparent objects)
        if hitInstance.Transparency < 0.9 then
            return false -- Opaque object blocks the view
        end
    end

    return true -- No obstruction or hit instance is part of target
end

-- Drawing circle for FOV
local fovCircleCreated = false
local fovCircle

local function createFOVCircle()
    if not fovCircleCreated then
        fovCircle = Drawing.new("Circle")
        fovCircle.Color = Color3.fromRGB(255, 0, 0)
        fovCircle.Thickness = 2
        fovCircle.Filled = false
        fovCircle.Transparency = 1
        fovCircle.Radius = math.max(aimbot_fov_size, silent_aim_fov)
        fovCircle.Visible = false
        fovCircleCreated = true
    end
end

createFOVCircle()

-- Create Rayfield window
local Window = Rayfield:CreateWindow({
    Name = "KLAR Rivals",
    LoadingTitle = "KLAR Rivals",
    LoadingSubtitle = "By Vxibility",
    ConfigurationSaving = {Enabled = false},
    KeySystem = false
})

-- Create tabs
local ESPTab = Window:CreateTab("ESP", 4483362458)
local AimbotTab = Window:CreateTab("Aimbot", 4483362300)
local SilentAimTab = Window:CreateTab("Silent Aim", 4483362300)
local ConfigTab = Window:CreateTab("Config", 4483362458)

-- ESP Tab elements
ESPTab:CreateSection("ESP Controls")

ESPTab:CreateToggle({
    Name = "Enable ESP",
    CurrentValue = true,
    Callback = function(val)
        esp_enabled = val
    end
})

ESPTab:CreateColorPicker({
    Name = "Box Color",
    Color = box_color,
    Callback = function(color)
        box_color = color
    end
})

ESPTab:CreateColorPicker({
    Name = "Name Color",
    Color = name_color,
    Callback = function(color)
        name_color = color
    end
})

ESPTab:CreateColorPicker({
    Name = "HP Bar Color",
    Color = hp_color,
    Callback = function(color)
        hp_color = color
    end
})

ESPTab:CreateColorPicker({
    Name = "Team Color",
    Color = team_color,
    Callback = function(color)
        team_color = color
    end
})

ESPTab:CreateSlider({
    Name = "Max Distance (studs)",
    Range = {100, 5000},
    Increment = 100,
    CurrentValue = esp_max_distance,
    Callback = function(val)
        esp_max_distance = val
        warn("ESP max distance set to: " .. esp_max_distance .. " studs")
    end
})

ESPTab:CreateToggle({
    Name = "Team Check",
    CurrentValue = true,
    Callback = function(val)
        esp_team_check = val
    end
})

ESPTab:CreateToggle({
    Name = "Visible Check",
    CurrentValue = false,
    Callback = function(val)
        esp_visible_check = val
    end
})

-- Cleanup ESP
Players.PlayerRemoving:Connect(function(player)
    if espElements[player] then
        for _, obj in pairs(espElements[player]) do
            if obj and obj.Remove then obj:Remove() end
        end
        espElements[player] = nil
    end
end)

-- ESP logic
RunService.RenderStepped:Connect(function()
    Camera = getCamera()
    if not esp_enabled or not Camera or not LocalCharacter then
        for _, elements in pairs(espElements or {}) do -- Protect against nil
            for _, obj in pairs(elements or {}) do
                obj.Visible = false
            end
        end
        warn("ESP disabled or invalid state: Camera=" .. tostring(Camera) .. ", LocalCharacter=" .. tostring(LocalCharacter))
        return
    end

    local localRootPart = LocalCharacter:FindFirstChild("HumanoidRootPart")
    if not localRootPart then
        warn("No localRootPart found")
        return
    end
    local localTeam = LocalPlayer.Team
    local localTeamName = localTeam and localTeam.Name or nil
    local localTeamColor = localTeam and localTeam.TeamColor or nil
    local localTeamAttribute = LocalPlayer:GetAttribute("Team") or (LocalPlayer:FindFirstChild("Leaderstats") and LocalPlayer.Leaderstats:FindFirstChild("Team") and LocalPlayer.Leaderstats.Team.Value) or nil
    local localTeamChar = LocalCharacter:FindFirstChild("Team") and LocalCharacter.Team.Value or nil
    local localTeamWorkspace = Workspace:FindFirstChild("Teams") and Workspace.Teams:FindFirstChild(LocalPlayer.Name) and Workspace.Teams[LocalPlayer.Name].Value
    local localAttributes = {}
    local success, attrs = pcall(function() return LocalPlayer:GetAttributes() end)
    if success then
        for k, v in pairs(attrs) do
            if type(v) == "string" or type(v) == "number" or type(v) == "boolean" then
                localAttributes[k] = v
            end
        end
    end
    warn("Local Team: Name=" .. tostring(localTeamName) .. ", Color=" .. tostring(localTeamColor) .. ", Attribute=" .. tostring(localTeamAttribute) .. ", CharTeam=" .. tostring(localTeamChar) .. ", WorkspaceTeam=" .. tostring(localTeamWorkspace) .. ", Attributes=" .. tostring(HttpService:JSONEncode(localAttributes)))

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local character = player.Character
            local rootPart = character:FindFirstChild("HumanoidRootPart")
            local humanoid = character:FindFirstChild("Humanoid")
            local playerTeam = player.Team
            local playerTeamName = playerTeam and playerTeam.Name or nil
            local playerTeamColor = playerTeam and playerTeam.TeamColor or nil
            local playerTeamAttribute = player:GetAttribute("Team") or (player:FindFirstChild("Leaderstats") and player.Leaderstats:FindFirstChild("Team") and player.Leaderstats.Team.Value) or nil
            local playerTeamChar = character:FindFirstChild("Team") and character.Team.Value or nil
            local playerTeamWorkspace = Workspace:FindFirstChild("Teams") and Workspace.Teams:FindFirstChild(player.Name) and Workspace.Teams[player.Name].Value
            local playerAttributes = {}
            local success, attrs = pcall(function() return player:GetAttributes() end)
            if success then
                for k, v in pairs(attrs) do
                    if type(v) == "string" or type(v) == "number" or type(v) == "boolean" then
                        playerAttributes[k] = v
                    end
                end
            end
            warn(player.Name .. " Team: Name=" .. tostring(playerTeamName) .. ", Color=" .. tostring(playerTeamColor) .. ", Attribute=" .. tostring(playerTeamAttribute) .. ", CharTeam=" .. tostring(playerTeamChar) .. ", WorkspaceTeam=" .. tostring(playerTeamWorkspace) .. ", Attributes=" .. tostring(HttpService:JSONEncode(playerAttributes)))
            if rootPart and humanoid then
                local distance = getDistance(Camera.CFrame.Position, rootPart.Position)
                if distance > esp_max_distance then
                    if espElements[player] then
                        for _, obj in pairs(espElements[player] or {}) do
                            obj.Visible = false
                        end
                    end
                    continue
                end

                local isTeammate = false
                if esp_team_check and localTeam and playerTeam then
                    local success, result = pcall(function()
                        return (localTeamName and playerTeamName and localTeamName == playerTeamName) or
                               (localTeamColor and playerTeamColor and localTeamColor == playerTeamColor) or
                               (localTeamAttribute and playerTeamAttribute and localTeamAttribute == playerTeamAttribute) or
                               (localTeamChar and playerTeamChar and localTeamChar == playerTeamChar) or
                               (localTeamWorkspace and playerTeamWorkspace and localTeamWorkspace == playerTeamWorkspace) or
                               (next(localAttributes) and next(playerAttributes) and next(localAttributes) == next(playerAttributes))
                    end)
                    if success and result then
                        isTeammate = true
                    end
                    if isTeammate then
                        if espElements[player] then
                            for _, obj in pairs(espElements[player] or {}) do
                                obj.Visible = false
                            end
                        end
                        warn("ESP skipped: " .. player.Name .. " is teammate (match found)")
                        continue
                    end
                end

                if esp_visible_check and not isVisible(Camera.CFrame.Position, rootPart.Position, character) then
                    if espElements[player] then
                        for _, obj in pairs(espElements[player] or {}) do
                            obj.Visible = false
                        end
                    end
                    warn("ESP skipped: " .. player.Name .. " not visible")
                    continue
                end

                if not espElements[player] then
                    local box = Drawing.new("Square")
                    local nameLabel = Drawing.new("Text")
                    local hpBar = Drawing.new("Square")

                    box.Thickness = 2
                    box.Filled = false
                    box.Transparency = 1
                    box.ZIndex = 1

                    nameLabel.Size = 18
                    nameLabel.Center = true
                    nameLabel.Outline = true
                    nameLabel.Transparency = 1
                    nameLabel.ZIndex = 3

                    hpBar.Filled = true
                    hpBar.Transparency = 1
                    hpBar.ZIndex = 2

                    espElements[player] = {box, nameLabel, hpBar}
                end

                local box, nameLabel, hpBar = unpack(espElements[player])
                local screenPos, onScreen = Camera:WorldToViewportPoint(rootPart.Position)
                if onScreen then
                    local size = Vector2.new(2000 / screenPos.Z, 2000 / screenPos.Z)
                    local healthPercent = math.clamp(humanoid.Health / humanoid.MaxHealth, 0, 1)

                    box.Size = size
                    box.Position = Vector2.new(screenPos.X - size.X / 2, screenPos.Y - size.Y / 2)
                    box.Color = esp_team_check and (isTeammate and team_color or box_color)
                    box.Visible = true

                    nameLabel.Text = player.Name
                    nameLabel.Position = Vector2.new(screenPos.X, screenPos.Y - size.Y / 2 - 20)
                    nameLabel.Color = esp_team_check and (isTeammate and team_color or name_color)
                    nameLabel.Visible = true

                    hpBar.Size = Vector2.new(5, size.Y * healthPercent)
                    hpBar.Position = Vector2.new(box.Position.X - 6, box.Position.Y + size.Y * (1 - healthPercent))
                    hpBar.Color = esp_team_check and (isTeammate and team_color or hp_color)
                    hpBar.Visible = true
                else
                    box.Visible = false
                    nameLabel.Visible = false
                    hpBar.Visible = false
                end
            end
        end
    end
end)

-- Aimbot Tab
AimbotTab:CreateSection("Aimbot Settings")

AimbotTab:CreateToggle({
    Name = "Enable Aimbot",
    CurrentValue = false,
    Callback = function(val)
        aimbot_enabled = val
    end
})

AimbotTab:CreateButton({
    Name = "Set Aimbot Activation Key",
    Callback = function()
        Rayfield:Notify({
            Title = "Aimbot Key",
            Content = "Press MouseButton1, MouseButton2, or any key...",
            Duration = 3
        })
        local connection
        connection = UserInputService.InputBegan:Connect(function(input, processed)
            if processed then return end
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.MouseButton2 then
                aimbot_key_code = input.UserInputType
                aimbot_key_name = tostring(input.UserInputType.Name)
            elseif input.UserInputType == Enum.UserInputType.Keyboard then
                aimbot_key_code = input.KeyCode
                aimbot_key_name = tostring(input.KeyCode.Name)
            else return end
            warn("Aimbot bound to: " .. aimbot_key_name)
            Rayfield:Notify({
                Title = "Key Set",
                Content = aimbot_key_name .. " bound to Aimbot.",
                Duration = 2
            })
            connection:Disconnect()
        end)
    end
})

AimbotTab:CreateDropdown({
    Name = "Aim Part",
    Options = {"Head", "UpperTorso", "LowerTorso", "HumanoidRootPart"},
    CurrentOption = "Head",
    Callback = function(opt)
        aimbot_aim_part = tostring(opt)
        warn("Aimbot aim part set to: " .. aimbot_aim_part)
    end
})

AimbotTab:CreateDropdown({
    Name = "Target Method",
    Options = {"Distance", "Crosshair"},
    CurrentOption = "Distance",
    Callback = function(opt)
        aimbot_target_method = tostring(opt)
        warn("Aimbot target method set to: " .. aimbot_target_method)
    end
})

AimbotTab:CreateSlider({
    Name = "FOV Radius",
    Range = {10, 300},
    Increment = 1,
    CurrentValue = aimbot_fov_size,
    Callback = function(val)
        aimbot_fov_size = val
        if fovCircle then fovCircle.Radius = math.max(val, silent_aim_fov) end
    end
})

AimbotTab:CreateSlider({
    Name = "Smoothness",
    Range = {1, 10},
    Increment = 1,
    CurrentValue = aimbot_smoothness,
    Callback = function(val)
        aimbot_smoothness = val
    end
})

AimbotTab:CreateSlider({
    Name = "Max Distance (studs)",
    Range = {100, 5000},
    Increment = 100,
    CurrentValue = aimbot_max_distance,
    Callback = function(val)
        aimbot_max_distance = val
        warn("Aimbot max distance set to: " .. aimbot_max_distance .. " studs")
    end
})

AimbotTab:CreateToggle({
    Name = "Team Check",
    CurrentValue = true,
    Callback = function(val)
        aimbot_team_check = val
    end
})

AimbotTab:CreateToggle({
    Name = "Visible Check",
    CurrentValue = false,
    Callback = function(val)
        aimbot_visible_check = val
    end
})

AimbotTab:CreateToggle({
    Name = "Show FOV Circle",
    CurrentValue = true,
    Callback = function(val)
        show_fov_circle = val
        if fovCircle then fovCircle.Visible = val and (aimbot_enabled or silent_aim_enabled) end
    end
})

-- Silent Aim Tab
SilentAimTab:CreateSection("Silent Aim")
SilentAimTab:CreateToggle({
    Name = "Enable Silent Aim",
    CurrentValue = false,
    Callback = function(val)
        silent_aim_enabled = val
    end
})

SilentAimTab:CreateButton({
    Name = "Set Silent Aim Activation Key",
    Callback = function()
        Rayfield:Notify({
            Title = "Silent Aim Key",
            Content = "Press MouseButton1, MouseButton2, or any key...",
            Duration = 3
        })
        local connection
        connection = UserInputService.InputBegan:Connect(function(input, processed)
            if processed then return end
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.MouseButton2 then
                silent_aim_key_code = input.UserInputType
                silent_aim_key_name = tostring(input.UserInputType.Name)
            elseif input.UserInputType == Enum.UserInputType.Keyboard then
                silent_aim_key_code = input.KeyCode
                silent_aim_key_name = tostring(input.KeyCode.Name)
            else return end
            warn("Silent Aim bound to: " .. silent_aim_key_name)
            Rayfield:Notify({
                Title = "Key Set",
                Content = silent_aim_key_name .. " bound to Silent Aim.",
                Duration = 2
            })
            connection:Disconnect()
        end)
    end
})

SilentAimTab:CreateDropdown({
    Name = "Silent Aim Part",
    Options = {"Head", "UpperTorso", "LowerTorso", "HumanoidRootPart"},
    CurrentOption = "Head",
    Callback = function(opt)
        silent_aim_part = tostring(opt)
        warn("Silent aim part set to: " .. silent_aim_part)
    end
})

SilentAimTab:CreateDropdown({
    Name = "Target Method",
    Options = {"Distance", "Crosshair"},
    CurrentOption = "Distance",
    Callback = function(opt)
        silent_aim_target_method = tostring(opt)
        warn("Silent aim target method set to: " .. silent_aim_target_method)
    end
})

SilentAimTab:CreateSlider({
    Name = "Silent Aim FOV",
    Range = {10, 300},
    Increment = 1,
    CurrentValue = silent_aim_fov,
    Callback = function(val)
        silent_aim_fov = val
        if fovCircle then fovCircle.Radius = math.max(val, aimbot_fov_size) end
    end
})

SilentAimTab:CreateSlider({
    Name = "Hit Chance (%)",
    Range = {0, 100},
    Increment = 1,
    CurrentValue = silent_aim_hit_chance,
    Callback = function(val)
        silent_aim_hit_chance = val
        warn("Silent aim hit chance set to: " .. silent_aim_hit_chance .. "%")
    end
})

SilentAimTab:CreateSlider({
    Name = "Max Distance (studs)",
    Range = {100, 5000},
    Increment = 100,
    CurrentValue = silent_aim_max_distance,
    Callback = function(val)
        silent_aim_max_distance = val
        warn("Silent aim max distance set to: " .. silent_aim_max_distance .. " studs")
    end
})

SilentAimTab:CreateToggle({
    Name = "Team Check",
    CurrentValue = true,
    Callback = function(val)
        silent_aim_team_check = val
    end
})

SilentAimTab:CreateToggle({
    Name = "Visible Check",
    CurrentValue = false,
    Callback = function(val)
        silent_aim_visible_check = val
    end
})

SilentAimTab:CreateToggle({
    Name = "Show FOV Circle",
    CurrentValue = true,
    Callback = function(val)
        show_fov_circle = val
        if fovCircle then fovCircle.Visible = val and (aimbot_enabled or silent_aim_enabled) end
    end
})

-- Combined Input Handling
UserInputService.InputBegan:Connect(function(input, processed)
    if processed then return end
    warn("Input received: " .. tostring(input.UserInputType) .. ", Code: " .. tostring(input.KeyCode))
    if aimbot_key_code == input.UserInputType or (input.UserInputType == Enum.UserInputType.Keyboard and aimbot_key_code == input.KeyCode) then
        aimbot_held = true
        warn("Aimbot held: true, Key: " .. tostring(aimbot_key_name))
    end
    if silent_aim_key_code == input.UserInputType or (input.UserInputType == Enum.UserInputType.Keyboard and silent_aim_key_code == input.KeyCode) then
        silent_aim_held = true
        warn("Silent Aim held: true, Key: " .. tostring(silent_aim_key_name))
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if aimbot_key_code == input.UserInputType or (input.UserInputType == Enum.UserInputType.Keyboard and aimbot_key_code == input.KeyCode) then
        aimbot_held = false
        warn("Aimbot held: false, Key: " .. tostring(aimbot_key_name))
    end
    if silent_aim_key_code == input.UserInputType or (input.UserInputType == Enum.UserInputType.Keyboard and silent_aim_key_code == input.KeyCode) then
        silent_aim_held = false
        warn("Silent Aim held: false, Key: " .. tostring(silent_aim_key_name))
    end
end)

-- Aimbot Logic
RunService.RenderStepped:Connect(function()
    Camera = getCamera()
    if fovCircle and show_fov_circle and (aimbot_enabled or silent_aim_enabled) then
        local mousePos = UserInputService:GetMouseLocation()
        fovCircle.Position = Vector2.new(mousePos.X, mousePos.Y)
        fovCircle.Radius = math.max(aimbot_enabled and aimbot_fov_size or 0, silent_aim_enabled and silent_aim_fov or 0)
        fovCircle.Visible = true
    elseif fovCircle then
        fovCircle.Visible = false
    end

    if not (aimbot_enabled and aimbot_held) or not Camera or not LocalCharacter then return end

    local closest_player, shortest_distance = nil, aimbot_fov_size
    local mousePos = UserInputService:GetMouseLocation()
    local localRootPart = LocalCharacter:FindFirstChild("HumanoidRootPart")
    local localTeam = LocalPlayer.Team
    local localTeamName = localTeam and localTeam.Name or nil
    local localTeamColor = localTeam and localTeam.TeamColor or nil
    local localTeamAttribute = LocalPlayer:GetAttribute("Team") or (LocalPlayer:FindFirstChild("Leaderstats") and LocalPlayer.Leaderstats:FindFirstChild("Team") and LocalPlayer.Leaderstats.Team.Value) or nil
    if not localRootPart then
        warn("No localRootPart found for Aimbot")
        return
    end

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            local rootPart = player.Character:FindFirstChild("HumanoidRootPart")
            local playerTeam = player.Team
            local playerTeamName = playerTeam and playerTeam.Name or nil
            local playerTeamColor = playerTeam and playerTeam.TeamColor or nil
            local playerTeamAttribute = player:GetAttribute("Team") or (player:FindFirstChild("Leaderstats") and player.Leaderstats:FindFirstChild("Team") and player.Leaderstats.Team.Value) or nil
            if rootPart then
                local distance = getDistance(Camera.CFrame.Position, rootPart.Position)
                if distance > aimbot_max_distance then continue end

                local part = getValidAimPart(player.Character, aimbot_aim_part)
                if part then
                    local screen_pos, on_screen = Camera:WorldToViewportPoint(part.Position)
                    if on_screen then
                        if aimbot_team_check and localTeam and playerTeam then
                            if (localTeamName and playerTeamName and localTeamName == playerTeamName) or
                               (localTeamColor and playerTeamColor and localTeamColor == playerTeamColor) or
                               (localTeamAttribute and playerTeamAttribute and localTeamAttribute == playerTeamAttribute) then
                                warn("Aimbot skipped: " .. player.Name .. " is teammate (match found)")
                                continue
                            end
                        end
                        if aimbot_visible_check and not isVisible(Camera.CFrame.Position, part.Position, player.Character) then continue end

                        local target_distance
                        if aimbot_target_method == "Distance" then
                            target_distance = distance
                        else
                            target_distance = (Vector2.new(screen_pos.X, screen_pos.Y) - Vector2.new(mousePos.X, mousePos.Y)).Magnitude
                        end
                        if target_distance < shortest_distance then
                            shortest_distance = target_distance
                            closest_player = player
                        end
                    end
                end
            end
        end
    end

    if closest_player and closest_player.Character then
        local part = getValidAimPart(closest_player.Character, aimbot_aim_part)
        if part then
            local screen_pos = Camera:WorldToViewportPoint(part.Position)
            local move_vector = (Vector2.new(screen_pos.X, screen_pos.Y) - Vector2.new(mousePos.X, mousePos.Y)) / aimbot_smoothness
            mousemoverel(move_vector.X, move_vector.Y)
        end
    end
end)

-- Silent Aim Logic
local utility = require(ReplicatedStorage.Modules.Utility)

local function get_closest_player(partName, fov)
    local closest, closest_distance = nil, fov
    local character = LocalPlayer.Character
    if not character then
        warn("Local player character not found")
        return nil
    end
    local localRootPart = character:FindFirstChild("HumanoidRootPart")
    local localTeam = LocalPlayer.Team
    local localTeamName = localTeam and localTeam.Name or nil
    local localTeamColor = localTeam and localTeam.TeamColor or nil
    local localTeamAttribute = LocalPlayer:GetAttribute("Team") or (LocalPlayer:FindFirstChild("Leaderstats") and LocalPlayer.Leaderstats:FindFirstChild("Team") and LocalPlayer.Leaderstats.Team.Value) or nil
    if not localRootPart then return nil end

    for _, player in ipairs(Players:GetPlayers()) do
        if player == LocalPlayer then continue end
        if player.Character then
            local part = getValidAimPart(player.Character, partName)
            if part then
                local distance = getDistance(Camera.CFrame.Position, part.Position)
                if distance > silent_aim_max_distance then continue end

                local position, on_screen = Camera:WorldToViewportPoint(part.Position)
                if on_screen then
                    local playerTeam = player.Team
                    local playerTeamName = playerTeam and playerTeam.Name or nil
                    local playerTeamColor = playerTeam and playerTeam.TeamColor or nil
                    local playerTeamAttribute = player:GetAttribute("Team") or (player:FindFirstChild("Leaderstats") and player.Leaderstats:FindFirstChild("Team") and player.Leaderstats.Team.Value) or nil
                    if silent_aim_team_check and localTeam and playerTeam then
                        if (localTeamName and playerTeamName and localTeamName == playerTeamName) or
                           (localTeamColor and playerTeamColor and localTeamColor == playerTeamColor) or
                           (localTeamAttribute and playerTeamAttribute and localTeamAttribute == playerTeamAttribute) then
                            warn("Silent Aim skipped: " .. player.Name .. " is teammate (match found)")
                            continue
                        end
                    end
                    if silent_aim_visible_check and not isVisible(Camera.CFrame.Position, part.Position, player.Character) then continue end

                    local target_distance
                    if silent_aim_target_method == "Distance" then
                        target_distance = distance
                    else
                        local center = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
                        target_distance = (center - Vector2.new(position.X, position.Y)).Magnitude
                    end
                    if target_distance < closest_distance then
                        closest = player
                        closest_distance = target_distance
                    end
                end
            end
        end
    end
    return closest
end

local oldRaycast = utility.Raycast
utility.Raycast = function(...)
    local args = {...}
    if #args > 0 and args[4] == 999 and silent_aim_enabled and silent_aim_held then
        local random_chance = math.random(0, 100)
        if random_chance <= silent_aim_hit_chance then
            local closest = get_closest_player(silent_aim_part, silent_aim_fov)
            if closest and closest.Character then
                local part = getValidAimPart(closest.Character, silent_aim_part)
                if part then args[3] = part.Position end
            end
        end
    end
    return oldRaycast(unpack(args))
end

-- Update FOV circle
RunService.RenderStepped:Connect(function()
    Camera = getCamera()
    if fovCircle and show_fov_circle and (aimbot_enabled or silent_aim_enabled) then
        local mousePos = UserInputService:GetMouseLocation()
        fovCircle.Position = Vector2.new(mousePos.X, mousePos.Y)
        fovCircle.Radius = math.max(aimbot_enabled and aimbot_fov_size or 0, silent_aim_enabled and silent_aim_fov or 0)
        fovCircle.Visible = true
    elseif fovCircle then
        fovCircle.Visible = false
    end
end)

-- Config Tab
local configName = ""
ConfigTab:CreateSection("Save/Load Config")

ConfigTab:CreateInput({
    Name = "Config Name",
    PlaceholderText = "Enter config name",
    RemoveTextAfterFocusLost = false,
    Callback = function(text)
        configName = text
    end
})

ConfigTab:CreateButton({
    Name = "Save Config",
    Callback = function()
        if configName == "" then return end
        local config = HttpService:JSONEncode({
            esp_enabled = esp_enabled, box_color = box_color, name_color = name_color, hp_color = hp_color,
            team_color = team_color, aimbot_enabled = aimbot_enabled, aimbot_key_name = aimbot_key_name,
            aimbot_aim_part = aimbot_aim_part, aimbot_fov_size = aimbot_fov_size, aimbot_smoothness = aimbot_smoothness,
            show_fov_circle = show_fov_circle, silent_aim_enabled = silent_aim_enabled, silent_aim_key_name = silent_aim_key_name,
            silent_aim_part = silent_aim_part, silent_aim_hit_chance = silent_aim_hit_chance, silent_aim_max_distance = silent_aim_max_distance,
            aimbot_max_distance = aimbot_max_distance, esp_max_distance = esp_max_distance, aimbot_target_method = aimbot_target_method,
            silent_aim_target_method = silent_aim_target_method, esp_team_check = esp_team_check, aimbot_team_check = aimbot_team_check,
            silent_aim_team_check = silent_aim_team_check, esp_visible_check = esp_visible_check, aimbot_visible_check = aimbot_visible_check,
            silent_aim_visible_check = silent_aim_visible_check
        })
        writefile(configName .. ".json", config)
    end
})

ConfigTab:CreateButton({
    Name = "Load Config",
    Callback = function()
        if configName == "" or not isfile(configName .. ".json") then return end
        local config = HttpService:JSONDecode(readfile(configName .. ".json"))
        esp_enabled = config.esp_enabled
        box_color = config.box_color
        name_color = config.name_color
        hp_color = config.hp_color
        team_color = config.team_color or Color3.fromRGB(0, 0, 255)
        aimbot_enabled = config.aimbot_enabled
        aimbot_key_name = config.aimbot_key_name
        aimbot_aim_part = config.aimbot_aim_part
        aimbot_fov_size = config.aimbot_fov_size
        aimbot_smoothness = config.aimbot_smoothness
        show_fov_circle = config.show_fov_circle
        silent_aim_enabled = config.silent_aim_enabled
        silent_aim_key_name = config.silent_aim_key_name or "MouseButton1"
        silent_aim_part = config.silent_aim_part
        silent_aim_hit_chance = config.silent_aim_hit_chance or 100
        silent_aim_max_distance = config.silent_aim_max_distance or 1000
        aimbot_max_distance = config.aimbot_max_distance or 1000
        esp_max_distance = config.esp_max_distance or 1000
        aimbot_target_method = config.aimbot_target_method or "Distance"
        silent_aim_target_method = config.silent_aim_target_method or "Distance"
        esp_team_check = config.esp_team_check or true
        aimbot_team_check = config.aimbot_team_check or true
        silent_aim_team_check = config.silent_aim_team_check or true
        esp_visible_check = config.esp_visible_check or false
        aimbot_visible_check = config.aimbot_visible_check or false
        silent_aim_visible_check = config.silent_aim_visible_check or false

        for player, elements in pairs(espElements) do
            elements[1].Color = box_color
            elements[2].Color = name_color
            elements[3].Color = hp_color
        end
    end
})
